{"ast":null,"code":"var _jsxFileName = \"C:\\\\Develop\\\\my-app\\\\src\\\\context.js\";\nimport React, { Component } from 'react';\nimport items from './data';\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state;\n      let tempRooms = [...rooms];\n      capacity = parseInt(capacity);\n      price = parseInt(price);\n      minSize = parseInt(minSize);\n      maxSize = parseInt(maxSize);\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      }\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      }\n\n      tempRooms = tempRooms.filter(room => room.price <= price);\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize);\n      tempRooms = tempRooms.filter(room => room.breakfast === breakfast);\n      tempRooms = tempRooms.filter(room => room.pets === pets);\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 16\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 23\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["C:/Develop/my-app/src/context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","setState","filterRooms","parseInt","filter","size","componentDidMount","formatData","featured","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport items from './data'\r\n\r\nconst RoomContext = React.createContext();\r\n\r\nclass RoomProvider extends Component {\r\n    state = {\r\n        rooms: [],\r\n        sortedRooms: [],\r\n        featuredRooms: [],\r\n        loading: true,\r\n        type:'all',\r\n        capacity:1,\r\n        price:0,\r\n        minPrice:0,\r\n        maxPrice:0,\r\n        minSize:0,\r\n        maxSize:0,\r\n        breakfast:false,\r\n        pets:false\r\n    };\r\n    \r\n    \r\n    componentDidMount() {\r\n        let rooms = this.formatData(items)\r\n        let featuredRooms = rooms.filter(room => room.featured === true);\r\n        let maxPrice = Math.max(...rooms.map(item => item.price))\r\n        let maxSize = Math.max(...rooms.map(item => item.size))\r\n        this.setState(\r\n            { \r\n                rooms, \r\n                featuredRooms, \r\n                sortedRooms: rooms, \r\n                loading: false,\r\n                price: maxPrice,\r\n                maxPrice,\r\n                maxSize\r\n            }\r\n        )\r\n    }\r\n\r\n    formatData(items){\r\n        let tempItems = items.map(item => {\r\n            let id = item.sys.id\r\n            let images = item.fields.images.map(image => image.fields.file.url)\r\n            let room = { ...item.fields, images, id}\r\n            return room;\r\n        });\r\n        return tempItems;\r\n    }\r\n\r\n    getRoom = (slug) => {\r\n        let tempRooms = [...this.state.rooms]\r\n        const room = tempRooms.find(room => room.slug === slug);\r\n        return room;\r\n    }\r\n\r\n    handleChange = event => {\r\n        const target = event.target;\r\n        const value = event.type === 'checkbox' ? target.checked: target.value;\r\n        const name = event.target.name;\r\n        this.setState(\r\n            {\r\n            [name]:value\r\n            }, \r\n            this.filterRooms\r\n        );\r\n    }\r\n\r\n    filterRooms = () => {\r\n        let { rooms, type, capacity, price, minSize, maxSize, breakfast, pets} = this.state\r\n        let tempRooms = [...rooms]\r\n        capacity = parseInt(capacity)\r\n        price = parseInt(price)\r\n        minSize = parseInt(minSize)\r\n        maxSize = parseInt(maxSize)\r\n        if (type !== 'all'){\r\n            tempRooms = tempRooms.filter(room => room.type === type)\r\n        }\r\n        if (capacity !== 1){\r\n            tempRooms = tempRooms.filter(room => room.capacity >= capacity)\r\n        }\r\n        tempRooms = tempRooms.filter(room => room.price <= price)\r\n        tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize)\r\n        tempRooms = tempRooms.filter(room => room.breakfast === breakfast)\r\n        tempRooms = tempRooms.filter(room => room.pets === pets)\r\n        \r\n\r\n        this.setState({\r\n            sortedRooms:tempRooms\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <RoomContext.Provider value={{ ...this.state,\r\n                                           getRoom: this.getRoom,\r\n                                           handleChange: this.handleChange }}>\r\n                {this.props.children}\r\n            </RoomContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nconst RoomConsumer = RoomContext.Consumer;\r\n\r\nexport function withRoomConsumer(Component){\r\n    return function ConsumerWrapper(props){\r\n        return <RoomConsumer>\r\n            {value => <Component {...props} context={value}/>}\r\n        </RoomConsumer>\r\n\r\n    }\r\n}\r\n\r\nexport{RoomProvider, RoomConsumer, RoomContext}"]},"metadata":{},"sourceType":"module"}